{"version":3,"file":"index.js","names":["_os","_interopRequireDefault","require","_net","obj","__esModule","default","MIN_PORT","MAX_PORT","DEFAULT_JOB_COUNT","os","cpus","length","clamp","value","min","max","findFreePorts","count","endPort","startPort","jobCount","isFree","isFreePort","Error","portInterval","Math","ceil","ports","jobPromises","i","push","scanRange","Promise","all","port","accept","reject","sock","net","createConnection","once","end","e","destroy","code","_default","exports","module"],"sources":["index.ts"],"sourcesContent":["\nimport os from \"os\"\nimport net from \"net\"\n\nconst MIN_PORT = 1025;\nconst MAX_PORT = 65535;\nconst DEFAULT_JOB_COUNT = os.cpus().length;\n\nexport interface FindFreePortsOptions {\n  startPort?: number;\n  endPort?: number;\n  jobCount?: number;\n  isFree?: (port: number) => Promise<boolean>;\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n}\n\nexport async function findFreePorts(count = 1, {\n  endPort = MAX_PORT,\n  startPort = MIN_PORT,\n  jobCount = DEFAULT_JOB_COUNT,\n  isFree = isFreePort\n}: FindFreePortsOptions = {}): Promise<number[]> {\n\n  if (count > (endPort - startPort)) {\n    throw new Error(`Could not find free ports: the range of allowed ports is not large enough for the requested amount of ports to find.`);\n  }\n\n  const portInterval = Math.ceil((endPort - startPort) / jobCount);\n\n  const ports: number[] = [];\n  const jobPromises: Array<Promise<void>> = [];\n\n  for (let i = 0; i < jobCount; i++) {\n    jobPromises.push(scanRange(startPort + portInterval * i, Math.min(endPort, startPort + portInterval * (i+1))));\n  }\n\n  await Promise.all(jobPromises);\n\n  if (ports.length < count) {\n    throw new Error(`Could not find free ports: there were not enough ports available.`);\n  }\n\n  return ports;\n\n  async function scanRange(startPort: number, endPort: number) {\n    for (let port = startPort; port < endPort; port++) {\n      if (ports.length >= count) {\n        break;\n      }\n      if (await isFree(port)) {\n\n        if (ports.length >= count) {\n          break;\n        }\n        ports.push(port);\n      }\n    }\n  }\n\n}\n\nexport function isFreePort(port: number): Promise<boolean> {\n  return new Promise((accept, reject) => {\n    const sock = net.createConnection(port);\n    sock.once('connect', () => { sock.end(); accept(false); });\n    sock.once('error', (e: NodeJS.ErrnoException) => {\n      sock.destroy();\n      if (e.code === 'ECONNREFUSED') {\n        accept(true)\n      } else {\n        reject(e);\n      }\n    });\n  });\n}\n\nexport default findFreePorts;\n\nif (typeof(module.exports) !== 'undefined') {\n  module.exports = findFreePorts;\n  findFreePorts.findFreePorts = findFreePorts;\n  findFreePorts.isFreePort = isFreePort;\n}\n"],"mappings":";;;;;;;;AACA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,IAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAqB,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAErB,MAAMG,QAAQ,GAAG,IAAI;AACrB,MAAMC,QAAQ,GAAG,KAAK;AACtB,MAAMC,iBAAiB,GAAGC,WAAE,CAACC,IAAI,EAAE,CAACC,MAAM;AAS1C,SAASC,KAAKA,CAACC,KAAa,EAAEC,GAAW,EAAEC,GAAW,EAAU;EAC9D,IAAIF,KAAK,GAAGC,GAAG,EAAE,OAAOA,GAAG;EAC3B,IAAID,KAAK,GAAGE,GAAG,EAAE,OAAOA,GAAG;EAC3B,OAAOF,KAAK;AACd;AAEO,eAAeG,aAAaA,CAACC,KAAK,GAAG,CAAC,EAAE;EAC7CC,OAAO,GAAGX,QAAQ;EAClBY,SAAS,GAAGb,QAAQ;EACpBc,QAAQ,GAAGZ,iBAAiB;EAC5Ba,MAAM,GAAGC;AACW,CAAC,GAAG,CAAC,CAAC,EAAqB;EAE/C,IAAIL,KAAK,GAAIC,OAAO,GAAGC,SAAU,EAAE;IACjC,MAAM,IAAII,KAAK,CAAE,sHAAqH,CAAC;EACzI;EAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACR,OAAO,GAAGC,SAAS,IAAIC,QAAQ,CAAC;EAEhE,MAAMO,KAAe,GAAG,EAAE;EAC1B,MAAMC,WAAiC,GAAG,EAAE;EAE5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,QAAQ,EAAES,CAAC,EAAE,EAAE;IACjCD,WAAW,CAACE,IAAI,CAACC,SAAS,CAACZ,SAAS,GAAGK,YAAY,GAAGK,CAAC,EAAEJ,IAAI,CAACX,GAAG,CAACI,OAAO,EAAEC,SAAS,GAAGK,YAAY,IAAIK,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChH;EAEA,MAAMG,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;EAE9B,IAAID,KAAK,CAAChB,MAAM,GAAGM,KAAK,EAAE;IACxB,MAAM,IAAIM,KAAK,CAAE,mEAAkE,CAAC;EACtF;EAEA,OAAOI,KAAK;EAEZ,eAAeI,SAASA,CAACZ,SAAiB,EAAED,OAAe,EAAE;IAC3D,KAAK,IAAIgB,IAAI,GAAGf,SAAS,EAAEe,IAAI,GAAGhB,OAAO,EAAEgB,IAAI,EAAE,EAAE;MACjD,IAAIP,KAAK,CAAChB,MAAM,IAAIM,KAAK,EAAE;QACzB;MACF;MACA,IAAI,MAAMI,MAAM,CAACa,IAAI,CAAC,EAAE;QAEtB,IAAIP,KAAK,CAAChB,MAAM,IAAIM,KAAK,EAAE;UACzB;QACF;QACAU,KAAK,CAACG,IAAI,CAACI,IAAI,CAAC;MAClB;IACF;EACF;AAEF;AAEO,SAASZ,UAAUA,CAACY,IAAY,EAAoB;EACzD,OAAO,IAAIF,OAAO,CAAC,CAACG,MAAM,EAAEC,MAAM,KAAK;IACrC,MAAMC,IAAI,GAAGC,YAAG,CAACC,gBAAgB,CAACL,IAAI,CAAC;IACvCG,IAAI,CAACG,IAAI,CAAC,SAAS,EAAE,MAAM;MAAEH,IAAI,CAACI,GAAG,EAAE;MAAEN,MAAM,CAAC,KAAK,CAAC;IAAE,CAAC,CAAC;IAC1DE,IAAI,CAACG,IAAI,CAAC,OAAO,EAAGE,CAAwB,IAAK;MAC/CL,IAAI,CAACM,OAAO,EAAE;MACd,IAAID,CAAC,CAACE,IAAI,KAAK,cAAc,EAAE;QAC7BT,MAAM,CAAC,IAAI,CAAC;MACd,CAAC,MAAM;QACLC,MAAM,CAACM,CAAC,CAAC;MACX;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAC,IAAAG,QAAA,GAEc7B,aAAa;AAAA8B,OAAA,CAAAzC,OAAA,GAAAwC,QAAA;AAE5B,IAAI,OAAOE,MAAM,CAACD,OAAQ,KAAK,WAAW,EAAE;EAC1CC,MAAM,CAACD,OAAO,GAAG9B,aAAa;EAC9BA,aAAa,CAACA,aAAa,GAAGA,aAAa;EAC3CA,aAAa,CAACM,UAAU,GAAGA,UAAU;AACvC"}