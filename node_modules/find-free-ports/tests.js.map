{"version":3,"file":"tests.js","names":["_ava","_interopRequireDefault","require","_net","_index","obj","__esModule","default","PORT_COUNT","isUnique","array","set","Set","element","has","add","listen","server","port","Promise","accept","reject","once","address","closeServer","close","err","test","t","throwsAsync","findFreePorts","startPort","endPort","ports","assert","length","truthy","isFreePort","jobCount","plan","net","createServer","undefined","falsy"],"sources":["tests.ts"],"sourcesContent":["\nimport test from \"ava\"\n\nimport net from \"net\"\n\nimport { findFreePorts, isFreePort } from './index';\n\nconst PORT_COUNT = 1000;\n\nfunction isUnique<T>(array: T[]): boolean {\n  const set = new Set();\n  for (const element of array) {\n    if (set.has(element)) {\n      return false;\n    }\n    set.add(element);\n  }\n  return true;\n}\n\nfunction listen(server: net.Server, port?: number): Promise<number> {\n  return new Promise((accept, reject) => {\n    server.once('error', reject);\n    server.listen(port, () => {\n      accept((server.address() as net.AddressInfo).port);\n    });\n  });\n}\n\nfunction closeServer(server: net.Server) {\n  return new Promise<void>((accept, reject) => {\n    server.close(err => {\n      if (err) {\n        reject(err);\n      } else {\n        accept();\n      }\n    });\n  });\n}\n\n\ntest('findFreePorts() crashes properly when there are not enough free ports within the given range', async (t) => {\n  await t.throwsAsync(() => findFreePorts(10, { startPort: 65530 }));\n  await t.throwsAsync(() => findFreePorts(3, { startPort: 1024, endPort: 1026 }));\n})\n\ntest('searches for one port by default', async (t) => {\n  const ports = await findFreePorts();\n  t.assert(ports.length === 1);\n  t.truthy(await isFreePort(ports[0]));\n});\n\ntest('can find a few ports when requested', async (t) => {\n  const ports = await findFreePorts(3);\n  t.assert(ports.length === 3);\n  t.assert(isUnique(ports));\n});\n\ntest('can find a large amount of unique free ports', async (t) => {\n  const ports = await findFreePorts(PORT_COUNT);\n  t.assert(ports.length === PORT_COUNT);\n  t.truthy(isUnique(ports));\n});\n\ntest('can run with only one job specified', async (t) => {\n  const ports = await findFreePorts(PORT_COUNT, { jobCount: 1 });\n  t.assert(ports.length === PORT_COUNT);\n  t.truthy(isUnique(ports));\n});\n\ntest('can run with exactly two jobs', async (t) => {\n  const ports = await findFreePorts(PORT_COUNT, { jobCount: 2 });\n  t.assert(ports.length === PORT_COUNT);\n  t.truthy(isUnique(ports));\n});\n\ntest('isFree() detects when a port is in use', async (t) => {\n  t.plan(1);\n  const server = net.createServer();\n  const port = await listen(server, undefined);\n  t.falsy(await isFreePort(port));\n  await closeServer(server);\n});\n\ntest('isFree() detects when a port is free', async (t) => {\n  t.plan(1);\n  const server = net.createServer();\n  const port = await listen(server);\n  await closeServer(server);\n  t.truthy(await isFreePort(port));\n});\n\n"],"mappings":"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"}